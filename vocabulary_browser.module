<?php
// $Id$
/**
 * @file vocabulary_browser.module
 * 
 * Provide an alternative way to browse into vocabularies with deep term levels
 * @FIXME utiliser taxonomy_term_path()
 * @FIXME traductions
 */

/****************************
 * Hooks
 ***************************/

/**
 * Implements hook_form_FORM_ID_alter
 */
function vocabulary_browser_form_taxonomy_form_term_alter(&$form, &$form_state) {
  if (arg(4) == 'add') {
    // on force la redirection qui dépend d'un champ caché pour le formulaire d'ajout de terme
    if ($destination = $_GET['destination']) {
      $form['destination']['#value'] = urlencode($_GET['destination']);
    }
    // préselectionner le parent en fonction de l'argument qu'on envoie dans l'url
    $tid_parent = (int)$_GET['vb_tid_parent'];
    $form['advanced']['parent']['#default_value'] = array($tid_parent);
  }
}

/**
 * Implementation of hook_menu().
 */
function vocabulary_browser_menu() { 
  $items['admin/content/taxonomy/vocabulary-browser'] = array(
    'title'            => 'Vocabulary browser',
    'page callback'    => 'vocabulary_browser_page',
    'access arguments' => array('administer vocabulary browser'),
    'type'             => MENU_LOCAL_TASK,
  );
  $items['admin/settings/vocabulary-browser'] = array(
    'title'            => 'Vocabulary browser',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('vocabulary_browser_settings_form'),
    'access arguments' => array('administer vocabulary browser settings'),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'vocabulary_browser.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_perm()
 */
function vocabulary_browser_perm() {
  return array('administer vocabulary browser', 'administer vocabulary browser settings');
}

function vocabulary_browser_taxonomy($op, $type, $array = NULL) {
  if ($type == 'term' && $op == 'insert') {
    // don't use variable_set, it would flush variables cache
    $_SESSION['vocabulary_browser_last_tid_inserted'] = (int)$array['tid'];
  }
}

/**
 * Implements hook_theme()
 */
function vocabulary_browser_theme($existing, $type, $theme, $path) {
  $vocabulary_browser_theme_path = vocabulary_browser_theme_path_get();
  return array(
    'vocabulary_browser_wrapper' => array(
      'arguments' => array('content' => NULL),
      'template'  => 'vocabulary-browser-wrapper',
      'path'      => $vocabulary_browser_theme_path,
    ), 
    'vocabulary_browser_vocabularies' => array(
      'arguments' => array('vocabularies' => NULL),
      'template'  => 'vocabulary-browser-vocabularies',
      'path'      => $vocabulary_browser_theme_path,
    ), 
    'vocabulary_browser_terms' => array(
      'arguments' => array('terms' => NULL),
      'template'  => 'vocabulary-browser-terms',
      'path'      => $vocabulary_browser_theme_path,
    ), 
    'vocabulary_browser_breadcrumb' => array(
      'arguments' => array('items' => NULL),
      'template'  => 'vocabulary-browser-breadcrumb',
      'path'      => $vocabulary_browser_theme_path,
    ), 
    'vocabulary_browser_toolbar' => array(
      'arguments' => array('links' => NULL),
      'template'  => 'vocabulary-browser-toolbar',
      'path'      => $vocabulary_browser_theme_path,
    ), 
  );
}

/**
 * Implémente hook_vocabulary_browser_themes();
 *
 * Déclare des themes utilisables par notre explorateur de theme. On
 * peut ensuite choisir le theme à utiliser dans l'administration du module.
 */
function vocabulary_browser_vocabulary_browser_themes() {
  $path = drupal_get_path('module', 'vocabulary_browser') . '/themes';
  return array(
    'Explorer' => $path . '/explorer',
    'Simple'   => $path . '/simple',
  );
}

/*************************
 * Controller
 ************************/

/**
 * Menu callback pour admin/content/taxonomy/vocabulary-browser
 *
 * @param (int) $vid
 *   Le vid du vocabulaire à explorer
 * @param (int) $tid
 *   Le terme panret pour lequel on souhaite exlorer les enfants
 * @return (string)
 *   Le html à afficher
 */
function vocabulary_browser_page() {

  // on caste en int par sécurité. Si pas d'argument, on reçoit 0.
  $vid = (int)arg(4);
  $tid = (int)arg(5);

  if (!$vid) {
    $vocabularies = taxonomy_get_vocabularies();
    $content = theme('vocabulary_browser_vocabularies', $vocabularies);
  }
  else {
    $terms = vocabulary_browser_term_direct_children_get($vid, $tid);
    $content = theme('vocabulary_browser_terms', $terms);
  }

  return theme('vocabulary_browser_wrapper', $content);
}

/**
 * Implements template_preprocess_hook
 */
function template_preprocess_vocabulary_browser_wrapper(&$variables) {

  // ajout du css du thème choisi dans l'administration
  drupal_add_css(vocabulary_browser_theme_path_get() . '/vocabulary_browser.css');
  
  // on ajoute le fil d'arianne à notre browser
  $vid = (int)arg(4);
  $tid = (int)arg(5);

  $breadcrumb_items        = vocabulary_browser_breadcrumb_items_get($vid, $tid);
  $variables['breadcrumb'] = theme('vocabulary_browser_breadcrumb', $breadcrumb_items);

  $toolbar_links           = vocabulary_browser_toolbar_links_get($vid, $tid);
  $variables['toolbar']    = theme('vocabulary_browser_toolbar', $toolbar_links);
}

/**
 * Implementes template_preprocess_hook()
 */
function template_preprocess_vocabulary_browser_terms(&$variables) {

  $tid = (int)arg(5);
  $variables['term_current'] = taxonomy_get_term($tid);

  foreach ($variables['terms'] as $key => $term) { 
    
    // ajouter une propriété si le terme est parent
    $tids  = vocabulary_browser_term_children_tids_get($term->tid);
    if ($tids) {
      $classes = 'has-children';
      $variables['terms'][$key]->has_children = TRUE;
    }
    else {
      $classes = 'no-children';
      $variables['terms'][$key]->has_children = FALSE;
    }

    // ajouter une propriété si le terme vient juste d'être crée
    $is_new = _vocabulary_browser_term_is_new($term);
    $classes = $is_new ? "$classes is-new" : $classes;
    $variables['terms'][$key]->is_new = $is_new;

    // créer l'url pour voir les terms enfants d'un terme
    $url_view   = "admin/content/taxonomy/vocabulary-browser/$term->vid/$term->tid";
    $options = array(
      'attributes' => array('class' => "view $classes", 'title' => t($term->name)),
    );
    if ($term_name_lenght = variable_get('vocabulary_browser_term_name_lenght', 40)) {
      $term->name = truncate_utf8($term->name, $term_name_lenght, FALSE, TRUE);
    }
    $variables['terms'][$key]->view_link = l($term->name, $url_view, $options);

    // créer l'url pour voir les terms enfants d'un terme
    $url_edit   = "admin/content/taxonomy/edit/term/$term->tid";
    $options = array(
      'query' => drupal_get_destination() . "&vb_tid_parent=$tid",
      'attributes' => array('class' => 'edit', 'title' => 'Modifier ce terme'),
    );
    $variables['terms'][$key]->edit_link = l('Editer', $url_edit, $options);
  }

  // trier les termes par ordre alphabétique
  $variables['terms'] = vocabulary_browser_terms_alphabetical_order($variables['terms']);

  // placer d'abord les termes parents, puis les termes enfant
  if (variable_get('vocabulary_browser_display_parents_at_top', 1)) {
    $variables['terms'] = _vocabulary_browser_parents_at_top($variables['terms']);
  }
}

/**
 * Implementes template_preprocess_hook()
 */
function template_preprocess_vocabulary_browser_vocabularies(&$variables) {
  $variables['links'] = array();
  foreach ($variables['vocabularies'] as $key => $vocabulary) { 
    $variables['links'][] = l($vocabulary->name, "admin/content/taxonomy/vocabulary-browser/$vocabulary->vid");
  }
}

/*************************
 * Model
 ************************/

/**
 * Retrouver tous les termes enfant de premier niveau
 * d'un terme parent ou à la racine d'un vocabulaire si
 * $vb_tid_parent vaut 0.
 *
 * @param (int) $vid
 *   Le vocabulaire dans lequel on cherche nos terms
 * 
 * @param (int) $tid_parent
 *   le tid du terme pour lequel on cherche les enfants.
 */
function vocabulary_browser_term_direct_children_get($vid, $tid_parent) {
  $sql = "SELECT *
    FROM term_data td 
    JOIN term_hierarchy th ON td.tid = th.tid 
    WHERE th.parent = %d
    AND td.vid = %d";
  $result = db_query($sql, $tid_parent, $vid);
  $terms = array();
  while ($row = db_fetch_object($result)) {
   $terms[] = $row; 
  }
  return $terms;
}

/**
 * Ce n'est PAS le fil d'arianne de Drupal
 *
 * C'est un fil d'arianne supplémentaire en haut
 * de page pour remonter facilement d'un niveau
 * dans la hiérarchie d'un vocabulaire.
 */
function vocabulary_browser_breadcrumb_items_get($vid, $tid) {
  $vocabulary    = taxonomy_vocabulary_load($vid);
  $term_current  = taxonomy_get_term($tid);
  $terms_parents = taxonomy_get_parents_all($tid);

  // le premier terme parent est le term_current, on le supprime.
  array_shift($terms_parents); 
  $links = array();
  if ($tid) {
    $links[] = $term_current->name;
  }
  foreach ($terms_parents as $term) {
    $links[] = l($term->name, "admin/content/taxonomy/vocabulary-browser/$vid/$term->tid");
  }
  if ($vid) {
    $links[] = $tid ? l($vocabulary->name, "admin/content/taxonomy/vocabulary-browser/$vid") : $vocabulary->name;
  }
  $links[] = l('Vocabulaires', 'admin/content/taxonomy/vocabulary-browser');
  $links = array_reverse($links);
  // si il n'y a qu'un seul lien, on ne renvoie rien
  if (count($links) < 2) {
    return FALSE;
  }
  else {
    return $links;
  }
}

function vocabulary_browser_toolbar_links_get() {
  $vid = (int)arg(4);
  $tid = (int)arg(5);
	$vocabulary    = $vid ? taxonomy_vocabulary_load($vid) : NULL;
  $term_current  = $tid ? taxonomy_get_term($tid) :  0;


 $links = array();
 if ($vid) {

   $options = array(
     'attributes' => array('id' => 'new-term'),
     'query' => drupal_get_destination() . "&vb_tid_parent=$tid",
   );
   $links[] = l('Créer un nouveau terme ici', "admin/content/taxonomy/$vid/add/term", $options);

 }
 drupal_alter('vocabulary_browser_toolbar', $links, $vocabulary, $term_current);
 return $links;
}

/**
 * Retourne les tids enfants à partir d'un tid parent
 *
 * @return
 *   array si tids enfants trouvés, FALSE sinon.
 */
function vocabulary_browser_term_children_tids_get($tid_parent) {
  $sql    = "SELECT tid FROM term_hierarchy WHERE parent = %d";
  $result = db_query($sql, $tid_parent);
  $tids = array();
  while ($row = db_fetch_object($result)) {
    $tids[] = $row->tid;
  }
  return $tids ? $tids : (bool)FALSE;
}


/*********************
 * Helper functions
 ********************/

/**
 * Vérifie que le vid et le tid en provenance de l'url sont bien
 * des chiffres et sont cohérents : par exemple
 * on ne doit si le vid est 3 est que le term est 6 on 
 * vérifie que le term 6 appartient effectivement au vid 3
 * pour éviter les surprises.
 */
function vocabulary_browser_check_args() {}

/**
 * Réordonner un tableau de term par ordre alphabétique
 *
 * @param $terms
 *   array d'objets term
 *
 * @return
 *   array d'objet term trié
 */
function vocabulary_browser_terms_alphabetical_order($terms) {
  $index = array();
  foreach ($terms as $key => $term) {
    $index[$key] = $term->name;
  }
  natcasesort($index);
  $sorted_terms = array();
  foreach ($index as $key => $value) {
    $sorted_terms[] = $terms[$key];
  }
  return $sorted_terms;
}

function _vocabulary_browser_parents_at_top($terms) {
  $parents = array();
  $no_chidren = array();
  foreach ($terms as $term) {
    if ($term->has_children) {
      $parents[$term->tid] = $term;
    }
    else {
      $no_children[$term->tid] = $term;
    }
  }
  $terms = $no_children ? array_merge($parents, $no_children) : $terms;
  return $terms;
}

/**
 * Détermine si un terme vient d'être juste d'être inséré en base.
 */
function _vocabulary_browser_term_is_new($term) {
  $is_new = FALSE;
  if ($tid_inserted = (int)$_SESSION['vocabulary_browser_last_tid_inserted']) {
    if ($term->tid == $tid_inserted) {
      $is_new = TRUE;
      unset($_SESSION['vocabulary_browser_last_tid_inserted']);
    }
  }
  return (bool)$is_new; 
}

function vocabulary_browser_theme_path_get() {
 return variable_get('vocabulary_browser_theme_path', drupal_get_path('module', 'vocabulary_browser') . '/themes/simple');
}
